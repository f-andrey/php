diff -up php-5.2.17/ext/bz2/bz2.c.CVE-2006-7243 php-5.2.17/ext/bz2/bz2.c
--- php-5.2.17/src/ext/bz2/bz2.c.CVE-2006-7243	2012-09-12 21:02:13.000000000 -0400
+++ php-5.2.17/src/ext/bz2/bz2.c	2012-09-12 21:03:59.000000000 -0400
@@ -384,6 +384,10 @@ static PHP_FUNCTION(bzopen)
 	if (Z_TYPE_PP(file) != IS_RESOURCE) {
 		convert_to_string_ex(file);
 
+		if (strlen(Z_STRVAL_PP(file)) != Z_STRLEN_PP(file)) {
+			RETURN_FALSE;
+		}
+
 		if (Z_STRLEN_PP(file) == 0) {
 			php_error_docref(NULL TSRMLS_CC, E_WARNING, "filename cannot be empty");
 			RETURN_FALSE;
diff -up php-5.2.17/ext/com_dotnet/com_persist.c.CVE-2006-7243 php-5.2.17/ext/com_dotnet/com_persist.c
--- php-5.2.17/src/ext/com_dotnet/com_persist.c.CVE-2006-7243	2012-09-12 23:16:59.000000000 -0400
+++ php-5.2.17/src/ext/com_dotnet/com_persist.c	2012-09-12 21:06:13.000000000 -0400
@@ -389,6 +389,9 @@ CPH_METHOD(SaveToFile)
 		}
 
 		if (filename) {
+			if (strlen(filename) != filename_len) {
+				RETURN_FALSE;
+			}
 			fullpath = expand_filepath(filename, NULL TSRMLS_CC);
 			if (!fullpath) {
 				RETURN_FALSE;
@@ -453,6 +456,10 @@ CPH_METHOD(LoadFromFile)
 			return;
 		}
 
+		if (strlen(filename) != filename_len) {
+			RETURN_FALSE;
+		}
+
 		if (!(fullpath = expand_filepath(filename, NULL TSRMLS_CC))) {
 			RETURN_FALSE;
 		}
diff -up php-5.2.17/ext/oci8/oci8_interface.c.CVE-2006-7243 php-5.2.17/ext/oci8/oci8_interface.c
--- php-5.2.17/src/ext/oci8/oci8_interface.c.CVE-2006-7243	2012-09-12 20:47:59.000000000 -0400
+++ php-5.2.17/src/ext/oci8/oci8_interface.c	2012-09-12 21:22:18.000000000 -0400
@@ -169,7 +169,12 @@ PHP_FUNCTION(oci_free_descriptor)
 			return;
 		}
 	}
-	
+
+	if (strlen(filename) != filename_len) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Filename cannot contain null bytes");
+		RETURN_FALSE;
+	}
+
 	if (zend_hash_find(Z_OBJPROP_P(z_descriptor), "descriptor", sizeof("descriptor"), (void **)&tmp) == FAILURE) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to find descriptor property");
 		RETURN_FALSE;
@@ -203,7 +208,12 @@ PHP_FUNCTION(oci_lob_save)
 			return;
 		}
 	}
-	
+
+	if (strlen(filename) != filename_len) {
+		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Filename cannot contain null bytes");
+		RETURN_FALSE;
+	}
+
 	if (zend_hash_find(Z_OBJPROP_P(z_descriptor), "descriptor", sizeof("descriptor"), (void **)&tmp) == FAILURE) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to find descriptor property");
 		RETURN_FALSE;
@@ -919,6 +929,10 @@ PHP_FUNCTION(oci_lob_export)
 		/* nothing to write, fail silently */
 		RETURN_FALSE;
 	}
+
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
 	
 	if (PG(safe_mode) && (!php_checkuid(filename, NULL, CHECKUID_CHECK_FILE_AND_DIR))) {
 		RETURN_FALSE;
@@ -1659,8 +1673,8 @@ PHP_FUNCTION(oci_num_fields)
 }
 /* }}} */
 
-/* {{{ proto resource oci_parse(resource connection, string query)
-   Parse a query and return a statement */
+/* {{{ proto resource oci_parse(resource connection, string statement)
+   Parse a SQL or PL/SQL statement and return a statement resource */
 PHP_FUNCTION(oci_parse)
 {
 	zval *z_connection;
diff -up php-5.2.17/ext/odbc/php_odbc.c.CVE-2006-7243 php-5.2.17/ext/odbc/php_odbc.c
--- php-5.2.17/src/ext/odbc/php_odbc.c.CVE-2006-7243	2012-09-12 21:55:06.000000000 -0400
+++ php-5.2.17/src/ext/odbc/php_odbc.c	2012-09-12 21:55:30.000000000 -0400
@@ -1054,6 +1054,9 @@ PHP_FUNCTION(odbc_execute)
 			if (Z_STRLEN_PP(tmp) > 2 &&
 				Z_STRVAL_PP(tmp)[0] == '\'' &&
 				Z_STRVAL_PP(tmp)[Z_STRLEN_PP(tmp) - 1] == '\'') {
+				if (strlen(tmp) != Z_STRLEN_PP(tmp)) {
+					RETURN_FALSE;
+				}
 				filename = estrndup(&Z_STRVAL_PP(tmp)[1], Z_STRLEN_PP(tmp) - 2);
 				filename[strlen(filename)] = '\0';
 
diff -up php-5.2.17/ext/openssl/openssl.c.CVE-2006-7243 php-5.2.17/ext/openssl/openssl.c
--- php-5.2.17/src/ext/openssl/openssl.c.CVE-2006-7243	2012-09-12 22:03:10.000000000 -0400
+++ php-5.2.17/src/ext/openssl/openssl.c	2012-09-12 22:08:04.000000000 -0400
@@ -913,6 +913,10 @@ PHP_FUNCTION(openssl_x509_export_to_file
 	}
 	RETVAL_FALSE;
 
+	if (strlen(filename) != filename_len) {
+		return;
+	}
+
 	cert = php_openssl_x509_from_zval(zcert, 0, &certresource TSRMLS_CC);
 	if (cert == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "cannot get cert from parameter 1");
@@ -1911,6 +1915,10 @@ PHP_FUNCTION(openssl_csr_export_to_file)
 	}
 	RETVAL_FALSE;
 
+	if (strlen(filename) != filename_len) {
+		return;
+	}
+
 	csr = php_openssl_csr_from_zval(&zcsr, 0, &csr_resource TSRMLS_CC);
 	if (csr == NULL) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "cannot get CSR from parameter 1");
@@ -2577,6 +2585,10 @@ PHP_FUNCTION(openssl_pkey_export_to_file
 	}
 	RETVAL_FALSE;
 
+	if (strlen(filename) != filename_len) {
+		return;
+	}
+
 	key = php_openssl_evp_from_zval(zpkey, 0, passphrase, 0, &key_resource TSRMLS_CC);
 
 	if (key == NULL) {
@@ -2925,6 +2937,14 @@ PHP_FUNCTION(openssl_pkcs7_encrypt)
 				&outfilename, &outfilename_len, &zrecipcerts, &zheaders, &flags, &cipherid) == FAILURE)
 		return;
 
+	if (strlen(infilename) != infilename_len) {
+		return;
+	}
+
+	if (strlen(outfilename) != outfilename_len) {
+		return;
+	}
+
 	
 	if (php_openssl_safe_mode_chk(infilename TSRMLS_CC) || php_openssl_safe_mode_chk(outfilename TSRMLS_CC)) {
 		return;
@@ -3081,14 +3101,23 @@ PHP_FUNCTION(openssl_pkcs7_sign)
 	char * outfilename;	int outfilename_len;
 	char * extracertsfilename = NULL; int extracertsfilename_len;
 
+	RETVAL_FALSE;
+
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "ssZZa!|ls",
 				&infilename, &infilename_len, &outfilename, &outfilename_len,
 				&zcert, &zprivkey, &zheaders, &flags, &extracertsfilename,
 				&extracertsfilename_len) == FAILURE) {
 		return;
 	}
-	
-	RETVAL_FALSE;
+
+
+	if (strlen(infilename) != infilename_len) {
+		return;
+	}
+
+	if (strlen(outfilename) != outfilename_len) {
+		return;
+	}
 
 	if (extracertsfilename) {
 		others = load_all_certs_from_file(extracertsfilename);
@@ -3184,12 +3213,20 @@ PHP_FUNCTION(openssl_pkcs7_decrypt)
 	char * infilename;	int infilename_len;
 	char * outfilename;	int outfilename_len;
 
+	RETVAL_FALSE;
+
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "ssZ|Z", &infilename, &infilename_len,
 				&outfilename, &outfilename_len, &recipcert, &recipkey) == FAILURE) {
 		return;
 	}
 
-	RETVAL_FALSE;
+	if (strlen(infilename) != infilename_len) {
+		return;
+	}
+
+	if (strlen(outfilename) != outfilename_len) {
+		return;
+	}
 
 	cert = php_openssl_x509_from_zval(recipcert, 0, &certresval TSRMLS_CC);
 	if (cert == NULL) {
diff -up php-5.2.17/ext/pgsql/pgsql.c.CVE-2006-7243 php-5.2.17/ext/pgsql/pgsql.c
--- php-5.2.17/src/ext/pgsql/pgsql.c.CVE-2006-7243	2012-09-12 22:08:40.000000000 -0400
+++ php-5.2.17/src/ext/pgsql/pgsql.c	2012-09-12 22:09:22.000000000 -0400
@@ -2927,6 +2927,10 @@ PHP_FUNCTION(pg_lo_import)
 		WRONG_PARAM_COUNT;
 	}
 
+	if (strlen(file_in) != name_len) {
+		RETURN_FALSE;
+	}
+
 	if (PG(safe_mode) &&(!php_checkuid(file_in, NULL, CHECKUID_CHECK_FILE_AND_DIR))) {
 		RETURN_FALSE;
 	}
@@ -3025,6 +3029,10 @@ PHP_FUNCTION(pg_lo_export)
 		RETURN_FALSE;
 	}
 
+	if (strlen(file_out) != name_len) {
+		RETURN_FALSE;
+	}
+
 	if (PG(safe_mode) &&(!php_checkuid(file_out, NULL, CHECKUID_CHECK_FILE_AND_DIR))) {
 		RETURN_FALSE;
 	}
diff -up php-5.2.17/ext/posix/posix.c.CVE-2006-7243 php-5.2.17/ext/posix/posix.c
--- php-5.2.17/src/ext/posix/posix.c.CVE-2006-7243	2012-09-12 22:26:46.000000000 -0400
+++ php-5.2.17/src/ext/posix/posix.c	2012-09-12 22:28:10.000000000 -0400
@@ -679,6 +679,10 @@ PHP_FUNCTION(posix_mkfifo)
 		RETURN_FALSE;
 	}
 
+	if (strlen(path) != path_len) {
+		RETURN_FALSE;
+	}
+
 	if (php_check_open_basedir_ex(path, 0 TSRMLS_CC) ||
 			(PG(safe_mode) && (!php_checkuid(path, NULL, CHECKUID_ALLOW_ONLY_DIR)))) {
 		RETURN_FALSE;
@@ -714,6 +718,10 @@ PHP_FUNCTION(posix_mknod)
 		RETURN_FALSE;
 	}
 
+	if (strlen(path) != path_len) {
+		RETURN_FALSE;
+	}
+
 	if (php_check_open_basedir_ex(path, 0 TSRMLS_CC) ||
 			(PG(safe_mode) && (!php_checkuid(path, NULL, CHECKUID_ALLOW_ONLY_DIR)))) {
 		RETURN_FALSE;
@@ -792,6 +800,10 @@ PHP_FUNCTION(posix_access)
 		RETURN_FALSE;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	path = expand_filepath(filename, NULL TSRMLS_CC);
 	if (!path) {
 		POSIX_G(last_error) = EIO;
diff -up php-5.2.17/ext/sqlite/sqlite.c.CVE-2006-7243 php-5.2.17/ext/sqlite/sqlite.c
--- php-5.2.17/src/ext/sqlite/sqlite.c.CVE-2006-7243	2012-09-12 22:34:20.000000000 -0400
+++ php-5.2.17/src/ext/sqlite/sqlite.c	2012-09-12 22:36:36.000000000 -0400
@@ -1230,6 +1230,10 @@ PHP_FUNCTION(sqlite_popen)
 		ZVAL_NULL(errmsg);
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (memcmp(filename, ":memory:", sizeof(":memory:")) != 0) {
 		/* resolve the fully-qualified path name to use as the hash key */
 		if (!(fullpath = expand_filepath(filename, NULL TSRMLS_CC))) {
@@ -1306,6 +1310,10 @@ PHP_FUNCTION(sqlite_open)
 		ZVAL_NULL(errmsg);
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (memcmp(filename, ":memory:", sizeof(":memory:")) != 0) {
 		/* resolve the fully-qualified path name to use as the hash key */
 		if (!(fullpath = expand_filepath(filename, NULL TSRMLS_CC))) {
@@ -1358,6 +1366,10 @@ PHP_FUNCTION(sqlite_factory)
 		ZVAL_NULL(errmsg);
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (memcmp(filename, ":memory:", sizeof(":memory:")) != 0) {
 		/* resolve the fully-qualified path name to use as the hash key */
 		if (!(fullpath = expand_filepath(filename, NULL TSRMLS_CC))) {
diff -up php-5.2.17/ext/standard/dir.c.CVE-2006-7243 php-5.2.17/ext/standard/dir.c
--- php-5.2.17/src/ext/standard/dir.c.CVE-2006-7243	2012-09-12 22:43:15.000000000 -0400
+++ php-5.2.17/src/ext/standard/dir.c	2012-09-12 22:44:11.000000000 -0400
@@ -320,6 +320,10 @@ PHP_FUNCTION(chdir)
 		RETURN_FALSE;
 	}
 
+	if (strlen(str) != str_len) {
+		RETURN_FALSE;
+	}
+
 	if ((PG(safe_mode) && !php_checkuid(str, NULL, CHECKUID_CHECK_FILE_AND_DIR)) || php_check_open_basedir(str TSRMLS_CC)) {
 		RETURN_FALSE;
 	}
@@ -431,6 +435,10 @@ PHP_FUNCTION(glob)
 		return;
 	}
 
+	if (strlen(pattern) != pattern_len) {
+		RETURN_FALSE;
+	}
+
 	if (pattern_len >= MAXPATHLEN) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Pattern exceeds the maximum allowed length of %d characters", MAXPATHLEN);
 		RETURN_FALSE;
@@ -552,6 +560,10 @@ PHP_FUNCTION(scandir)
 		return;
 	}
 
+	if (strlen(dirn) != dirn_len) {
+		RETURN_FALSE;
+	}
+
 	if (dirn_len < 1) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Directory name cannot be empty");
 		RETURN_FALSE;
diff -up php-5.2.17/ext/standard/file.c.CVE-2006-7243 php-5.2.17/ext/standard/file.c
--- php-5.2.17/src/ext/standard/file.c.CVE-2006-7243	2012-09-12 22:44:55.000000000 -0400
+++ php-5.2.17/src/ext/standard/file.c	2012-09-12 22:54:12.000000000 -0400
@@ -374,6 +374,10 @@ PHP_FUNCTION(get_meta_tags)
 		return;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	md.stream = php_stream_open_wrapper(filename, "rb",
 			(use_include_path ? USE_PATH : 0) | ENFORCE_SAFE_MODE | REPORT_ERRORS,
 			NULL);
@@ -530,6 +534,10 @@ PHP_FUNCTION(file_get_contents)
 		return;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (ZEND_NUM_ARGS() == 5 && maxlen < 0) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "length must be greater than or equal to zero");
 		RETURN_FALSE;
@@ -590,6 +598,10 @@ PHP_FUNCTION(file_put_contents)
 		return;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (Z_TYPE_P(data) == IS_RESOURCE) {
 		php_stream_from_zval(srcstream, &data);
 	}
@@ -727,6 +739,11 @@ PHP_FUNCTION(file)
 	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s|lr!", &filename, &filename_len, &flags, &zcontext) == FAILURE) {
 		return;
 	}
+
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (flags < 0 || flags > (PHP_FILE_USE_INCLUDE_PATH | PHP_FILE_IGNORE_NEW_LINES | PHP_FILE_SKIP_EMPTY_LINES | PHP_FILE_NO_DEFAULT_CONTEXT)) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "'%ld' flag is not supported", flags);
 		RETURN_FALSE;
@@ -889,6 +914,10 @@ PHP_NAMED_FUNCTION(php_if_fopen)
 		RETURN_FALSE;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	context = php_stream_context_from_zval(zcontext, 0);
 	
 	stream = php_stream_open_wrapper_ex(filename, mode, (use_include_path ? USE_PATH : 0) | ENFORCE_SAFE_MODE | REPORT_ERRORS, NULL, context);
@@ -1452,6 +1481,10 @@ PHP_FUNCTION(mkdir)
 		RETURN_FALSE;
 	}
 
+	if (strlen(dir) != dir_len) {
+		RETURN_FALSE;
+	}
+
 	context = php_stream_context_from_zval(zcontext, 0);
 
 	RETURN_BOOL(php_stream_mkdir(dir, mode, (recursive ? PHP_STREAM_MKDIR_RECURSIVE : 0) | REPORT_ERRORS, context));
@@ -1567,6 +1604,14 @@ PHP_FUNCTION(rename)
 		RETURN_FALSE;
 	}
 
+	if (strlen(old_name) != old_name_len) {
+		RETURN_FALSE;
+	}
+
+	if (strlen(new_name) != new_name_len) {
+		RETURN_FALSE;
+	}
+
 	wrapper = php_stream_locate_url_wrapper(old_name, NULL, 0 TSRMLS_CC);
 
 	if (!wrapper || !wrapper->wops) {
diff -up php-5.2.17/ext/standard/filestat.c.CVE-2006-7243 php-5.2.17/ext/standard/filestat.c
--- php-5.2.17/src/ext/standard/filestat.c.CVE-2006-7243	2012-09-12 22:55:00.000000000 -0400
+++ php-5.2.17/src/ext/standard/filestat.c	2012-09-12 22:59:08.000000000 -0400
@@ -379,6 +379,10 @@ PHP_FUNCTION(disk_free_space)
 		RETURN_FALSE;
 	}
 
+	if (strlen(path) != path_len) {
+		RETURN_FALSE;
+	}
+
 	if (php_disk_free_space(path, &bytesfree TSRMLS_CC) == SUCCESS) {
 		RETURN_DOUBLE(bytesfree);
 	}
@@ -749,6 +767,10 @@ PHPAPI void php_stat(const char *filenam
 		RETURN_FALSE;
 	}
 
+	if (strlen(filename) != filename_length) {
+		RETURN_FALSE;
+	}
+
 	if ((wrapper = php_stream_locate_url_wrapper(filename, &local, 0 TSRMLS_CC)) == &php_plain_files_wrapper) {
 		if (php_check_open_basedir(local TSRMLS_CC)) {
 			RETURN_FALSE;
diff -up php-5.2.17/ext/standard/iptc.c.CVE-2006-7243 php-5.2.17/ext/standard/iptc.c
--- php-5.2.17/src/ext/standard/iptc.c.CVE-2006-7243	2012-09-12 23:00:45.000000000 -0400
+++ php-5.2.17/src/ext/standard/iptc.c	2012-09-12 23:01:01.000000000 -0400
@@ -190,6 +190,10 @@ PHP_FUNCTION(iptcembed)
 		return;
 	}
 
+	if (strlen(jpeg_file) != jpeg_file_len) {
+		RETURN_FALSE;
+	}
+
 	if (PG(safe_mode) && (!php_checkuid(jpeg_file, NULL, CHECKUID_CHECK_FILE_AND_DIR))) {
 		RETURN_FALSE;
 	}
