Backport of:

From 4435b9142ff9813845d5c97ab29a5d637bedb257 Mon Sep 17 00:00:00 2001
From: Stanislav Malyshev <stas@php.net>
Date: Sun, 5 Apr 2015 16:01:24 -0700
Subject: [PATCH] Fixed bug #69353 (Missing null byte checks for paths in
 various PHP extensions)

---
 ext/dom/document.c                                 | 5 ++++-
 ext/dom/tests/DOMDocument_loadHTMLfile_error2.phpt | 5 +++++
 ext/fileinfo/fileinfo.c                            | 5 +++++
 ext/fileinfo/tests/finfo_file_basic.phpt           | 4 ++++
 ext/gd/gd.c                                        | 8 ++++----
 ext/hash/hash.c                                    | 7 ++++++-
 ext/hash/tests/hash_hmac_file_error.phpt           | 7 +++++++
 ext/pgsql/pgsql.c                                  | 2 +-
 ext/standard/link.c                                | 2 +-
 ext/standard/streamsfuncs.c                        | 2 +-
 ext/xmlwriter/php_xmlwriter.c                      | 4 ++--
 ext/zlib/zlib.c                                    | 4 ++--
 12 files changed, 42 insertions(+), 13 deletions(-)

--- a/src/ext/dom/document.c
+++ b/src/ext/dom/document.c
@@ -1573,6 +1573,9 @@
 	xmlInitParser();
 
 	if (mode == DOM_LOAD_FILE) {
+		if (CHECK_NULL_PATH(source, source_len)) {
+			return NULL;
+		}
 		char *file_dest = _dom_get_valid_file_path(source, resolved_path, MAXPATHLEN  TSRMLS_CC);
 		if (file_dest) {
 			ctxt = xmlCreateFileParserCtxt(file_dest);
--- a/src/ext/fileinfo/fileinfo.c
+++ b/src/ext/fileinfo/fileinfo.c
@@ -511,6 +511,11 @@
 				RETVAL_FALSE;
 				goto clean;
 			}
+			if (CHECK_NULL_PATH(buffer, buffer_len)) {
+				php_error_docref(NULL TSRMLS_CC, E_WARNING, "Invalid path");
+				RETVAL_FALSE;
+				goto clean;
+			}
 
 			wrap = php_stream_locate_url_wrapper(buffer, &tmp2, 0 TSRMLS_CC);
 
--- a/src/ext/fileinfo/tests/finfo_file_basic.phpt
+++ b/src/ext/fileinfo/tests/finfo_file_basic.phpt
@@ -19,6 +19,7 @@
 var_dump( finfo_file( $finfo, __FILE__) );
 var_dump( finfo_file( $finfo, __FILE__, FILEINFO_CONTINUE ) );
 var_dump( finfo_file( $finfo, $magicFile ) );
+var_dump( finfo_file( $finfo, $magicFile.chr(0).$magicFile) );
 
 ?>
 ===DONE===
@@ -27,4 +28,7 @@
 string(28) "text/x-php; charset=us-ascii"
 string(22) "PHP script, ASCII text"
 string(32) "text/plain; charset=unknown-8bit"
+
+Warning: finfo_file(): Invalid path in %s/finfo_file_basic.php on line %d
+bool(false)
 ===DONE===
--- a/src/ext/gd/gd.c
+++ b/src/ext/gd/gd.c
@@ -1479,6 +1479,11 @@
 		return;
 	}
 
+	/* No nulls allowed in paths */
+	if (strlen(file) != file_name) {
+		RETURN_FALSE;
+	}
+
 	stream = php_stream_open_wrapper(file, "rb", ENFORCE_SAFE_MODE | IGNORE_PATH | IGNORE_URL_WIN | REPORT_ERRORS, NULL);
 	if (stream == NULL) {
 		RETURN_FALSE;
@@ -2421,6 +2426,12 @@
 		if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "sllll", &file, &file_len, &srcx, &srcy, &width, &height) == FAILURE) {
 			return;
 		}
+
+		/* No nulls allowed in paths */
+		if (strlen(file) != file_len) {
+			RETURN_FALSE;
+		}
+
 		if (width < 1 || height < 1) {
 			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Zero width or height not allowed");
 			RETURN_FALSE;
@@ -2429,6 +2440,11 @@
 		if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &file, &file_len) == FAILURE) {
 			return;
 		}
+
+		/* No nulls allowed in paths */
+		if (strlen(file) != file_len) {
+			RETURN_FALSE;
+		}
 	}
 
 	stream = php_stream_open_wrapper(file, "rb", ENFORCE_SAFE_MODE|REPORT_ERRORS|IGNORE_PATH|IGNORE_URL_WIN, NULL);
@@ -4140,6 +4156,11 @@
 		return;
 	}
 
+	/* No nulls allowed in paths */
+	if (strlen(enc) != enc_len) {
+		RETURN_FALSE;
+	}
+
 	ZEND_FETCH_RESOURCE(f_ind, int *, &fnt, -1, "Type 1 font", le_ps_font);
 
 	if ((enc_vector = T1_LoadEncoding(enc)) == NULL) {
--- a/src/ext/hash/hash.c
+++ b/src/ext/hash/hash.c
@@ -136,6 +136,10 @@
 		RETURN_FALSE;
 	}
 	if (isfilename) {
+ 		if (CHECK_NULL_PATH(data, data_len)) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Invalid path");
+ 			RETURN_FALSE;
+ 		}
 		stream = php_stream_open_wrapper_ex(data, "rb", REPORT_ERRORS | ENFORCE_SAFE_MODE, NULL, DEFAULT_CONTEXT);
 		if (!stream) {
 			/* Stream will report errors opening file */
@@ -214,6 +218,10 @@
 		RETURN_FALSE;
 	}
 	if (isfilename) {
+		if (CHECK_NULL_PATH(data, data_len)) {
+			php_error_docref(NULL TSRMLS_CC, E_WARNING, "Invalid path");
+			RETURN_FALSE;
+		}
 		stream = php_stream_open_wrapper_ex(data, "rb", REPORT_ERRORS | ENFORCE_SAFE_MODE, NULL, DEFAULT_CONTEXT);
 		if (!stream) {
 			/* Stream will report errors opening file */
@@ -445,6 +453,11 @@
 		return;
 	}
 
+	/* No nulls allowed in paths */
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	ZEND_FETCH_RESOURCE(hash, php_hash_data*, &zhash, -1, PHP_HASH_RESNAME, php_hash_le_hash);
 	context = php_stream_context_from_zval(zcontext, 0);
 
--- a/src/ext/hash/tests/hash_hmac_file_error.phpt
+++ b/src/ext/hash/tests/hash_hmac_file_error.phpt
@@ -28,6 +28,9 @@
 echo "\n-- Testing hash_hmac_file() function with invalid hash algorithm --\n";
 hash_hmac_file('foo', $file, $key, TRUE);
 
+echo "\n-- Testing hash_hmac_file() function with bad path --\n";
+hash_hmac_file('crc32', $file.chr(0).$file, $key, TRUE);
+
 ?>
 ===Done===
 --EXPECTF--
@@ -51,4 +54,8 @@
 -- Testing hash_hmac_file() function with invalid hash algorithm --
 
 Warning: hash_hmac_file(): Unknown hashing algorithm: foo in %s on line %d
+
+-- Testing hash_hmac_file() function with bad path --
+
+Warning: hash_hmac_file(): Invalid path in %s on line %d
 ===Done===
\ No newline at end of file
--- a/src/ext/pgsql/pgsql.c
+++ b/src/ext/pgsql/pgsql.c
@@ -2873,6 +2873,11 @@
 		return;
 	}
 
+	/* No nulls allowed in paths */
+	if (strlen(z_filename) != z_filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (argc < 3) {
 		CHECK_DEFAULT_LINK(id);
 	}		
--- a/src/ext/standard/streamsfuncs.c
+++ b/src/ext/standard/streamsfuncs.c
@@ -1510,6 +1510,11 @@
 		return;
 	}
 
+	/* No nulls allowed in paths */
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	resolved_path = zend_resolve_path(filename, filename_len TSRMLS_CC);
 
 	if (resolved_path) {
--- a/src/ext/xmlwriter/php_xmlwriter.c
+++ b/src/ext/xmlwriter/php_xmlwriter.c
@@ -1740,7 +1740,7 @@
 /* }}} */
 #endif
 
-/* {{{ proto resource xmlwriter_open_uri(resource xmlwriter, string source)
+/* {{{ proto resource xmlwriter_open_uri(string source)
 Create new xmlwriter using source uri for output */
 static PHP_FUNCTION(xmlwriter_open_uri)
 {
@@ -1777,6 +1777,11 @@
 		RETURN_FALSE;
 	}
 
+	/* No nulls allowed in paths */
+	if (strlen(source) != source_len) {
+		RETURN_FALSE;
+	}
+
 	valid_file = _xmlwriter_get_valid_file_path(source, resolved_path, MAXPATHLEN TSRMLS_CC);
 	if (!valid_file) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to resolve file path");
--- a/src/ext/zlib/zlib.c
+++ b/src/ext/zlib/zlib.c
@@ -445,6 +445,11 @@
 		return;
 	}
 
+	/* No nulls allowed in paths */
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	use_include_path = flags ? USE_PATH : 0;
 
 	stream = php_stream_gzopen(NULL, filename, mode, use_include_path | ENFORCE_SAFE_MODE | REPORT_ERRORS, NULL, NULL STREAMS_CC TSRMLS_CC);
@@ -474,6 +479,11 @@
 		return;
 	}
 
+	/* No nulls allowed in paths */
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	use_include_path = flags ? USE_PATH : 0;
 
 	stream = php_stream_gzopen(NULL, filename, "rb", use_include_path | ENFORCE_SAFE_MODE, NULL, NULL STREAMS_CC TSRMLS_CC);
--- a/src/Zend/zend_API.h
+++ b/src/Zend/zend_API.h
@@ -517,6 +517,8 @@
 #define CHECK_ZVAL_STRING_REL(z)
 #endif
 
+#define CHECK_NULL_PATH(p, l) (strlen(p) != l)
+
 #define ZVAL_RESOURCE(z, l) {		\
 		Z_TYPE_P(z) = IS_RESOURCE;	\
 		Z_LVAL_P(z) = l;			\
